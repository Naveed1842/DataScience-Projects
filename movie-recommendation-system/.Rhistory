View(ll)
View(ozone)
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
suppressMessages(library(caret)
)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.6,
list = FALSE) # 60% training
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
install.packages("pgmm")
data(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
modolive <- train(Area ~ ., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modolive, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1] / 2, replace = F)
trainSA = SAheart[train, ]
testSA = SAheart[-train, ]
missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
set.seed(13234)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass(testSA$chd, predict(modelSA, newdata = testSA)
)
missClass(trainSA$chd, predict(modelSA, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
library(randomForest)
modvowel <- randomForest(y ~ ., data = vowel.train)
order(varImp(modvowel), decreasing = T)
?createFolds
data(oil)
install.packages("kLar")
y
install.packages("klar")
library(caret)
install.packages("klaR")
library(caret)
data(iris)
train_control <- trainControl(method="boot", number=100)
class(train_control)
View(train_control)
head(train_control)
?sample
?matrix
expenses<-c(850,861,1140,931,972)
mean(expenses)
950.8-600
x1=pnorm(10)
x2=x1+pnorm(10)
x3=x2+pnorm(10)
m<-cbind(x1,x2,x3)
cov(m)
x1
x1=rnorm(10)
x2=x1+rnorm(10)
x3=x2+rnorm(10)
m<-cbind(x1,x2,x3)
cov(m)
cov<-cov(m)
cov
load("MASS")
install.packages("MASS")
install.packages("MASS")
load('MASS')
load("MASS")
library("MASS")
cov
ginv(cov)
x1<-rnorm(10)
x2<-x1+rnorm(10)
x3<-x2+rnorm(10)
x4<-x3+rnorm(10)
m<-cbind(x1,x2,x3,x4)
cov(m)
ginv(m)
cor(x1,x1)
cor(x1,x2)
cov(x1,x2)
?rexp
rexp(1,3)
rexp(1,3)
rexp(5,3)
sum(rexp(5,3))
totalTime<-0
n<-0
while(totalTime<=0){
t=rexp(1,3)
n=n+1
totalTime=totalTime+t
}
n
totalTime<-0
n<-0
while(totalTime<=0){
t=rexp(1,3)
n=n+1
totalTime=totalTime+t
}
n
totalTime<-0
n<-0
while(totalTime<=1){
t=rexp(1,3)
n=n+1
totalTime=totalTime+t
}
n
1:10
count<-c()
count<-c()
for ( i in 1:10){
totalTime<-0
n<-0
while(totalTime<=1){
t=rexp(1,3)
n=n+1
totalTime=totalTime+t
}
count<-c(count,n)
}
count
f<-function(){
count<-c()
for ( i in 1:10000){
totalTime<-0
n<-0
while(totalTime<=1){
t=rexp(1,3)
n=n+1
totalTime=totalTime+t
}
count<-c(count,n)
}
return count
}
f<-function(){
count<-c()
for ( i in 1:10000){
totalTime<-0
n<-0
while(totalTime<=1){
t=rexp(1,3)
n=n+1
totalTime=totalTime+t
}
count<-c(count,n)
}
return (count)
}
data.observation<-f()
plot(data.observation)
View(data.observation)
data.observation.order<-sort(data.observation)
max(data.observation.order)
min(data.observation.order)
x<-1:12
x[1]
library(dplyr)
data.observation.order==1
length(data.observation.order==1)
class(data.observation)
class(data.observation)<-data.frame
data<-data.observation.order
max(data)
pmf<-function(data){
frequency<-c()
for (i in 1:max(data)){
n<-0
for (j in 1:10000){
if(data[j]==i){n<-n+1}
}
frequency<-c(frequency,n/10000)
}
return (frequency)
}
x<-pmf(data)
x
plot(1:12,x)
plot(1:12,x,type="l")
prob<-pmf(data)
plot(1:max(data),prob,type="s",main="PMF of no. of events",xlab="count of events",ylab="frequency")
length(prob)
prob[1]
ecdf<-func(prob){
cumm.prob<-c()
x<-0
for (i in 1:length(prob)){
x<-x+prob[i]
cumm.prob<-c(cumm.prob,x)
}
return cumm.prob
}
ecdf<-func(prob){
cumm.prob<-c()
x<-0
for (i in 1:length(prob)){
x<-x+prob[i]
cumm.prob<-c(cumm.prob,x)
}
return (cumm.prob)
}
ecdf<-function(prob){
cumm.prob<-c()
x<-0
for (i in 1:length(prob)){
x<-x+prob[i]
cumm.prob<-c(cumm.prob,x)
}
return (cumm.prob)
}
cumm.prob<-ecdf(prob)
plot(1:max(data),cumm.prob)
plot(1:max(data),cumm.prob,type="s")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability")
data<-rpois(10000,3)
data.ordered<-sort(data)
plot(data.ordered,ppois(data.ordered,3),type="l",main="poisson distribution with lambda=3")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
data.observation<-f()
data.observation.order<-sort(data.observation)
data<-data.observation.order
pmf<-function(data){
frequency<-c()
for (i in 1:max(data)){
n<-0
for (j in 1:10000){
if(data[j]==i){n<-n+1}
}
frequency<-c(frequency,n/10000)
}
return (frequency)
}
prob<-pmf(data)
plot(1:max(data),prob,type="s",main="PMF of no. of events",xlab="count of events in [0,1]",ylab="frequency")
ecdf<-function(prob){
cumm.prob<-c()
x<-0
for (i in 1:length(prob)){
x<-x+prob[i]
cumm.prob<-c(cumm.prob,x)
}
return (cumm.prob)
}
cumm.prob<-ecdf(prob)
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data)
lines(data.pois.ordered,ppois(data.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
lines(data.pois.ordered,ppois(data.ordered,3),type="s",main="poisson distribution with lambda=3",col="red")
lines(data.pois.ordered,ppois(data.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
lines(data.pois.ordered,ppois(data.ordered,3),main="poisson distribution with lambda=3",col="red")
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data)
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
lines(data.pois.ordered,ppois(data.ordered,3),main="poisson distribution with lambda=3",col="red")
plot(data.pois.ordered,ppois(data.ordered,3),main="poisson distribution with lambda=3",col="red")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
plot(data.pois.ordered,ppois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
lines(data.pois.ordered,ppois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
?ppois
plot(1:max(data),prob,type="s",main="PMF of no. of events",xlab="count of events in [0,1]",ylab="frequency")
lines(data.pois.ordered,dpois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
lines(data.pois.ordered,ppois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
data.pois<-rpois(10000,3)
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data.pois)
plot(data.pois.ordered,ppois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("topright",
inset=.05,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(2,2),
col=c("green","red"),
bg="grey96")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(2,2),
col=c("green","red"),
bg="grey96")
hist(rbinom(runif(10000),500,0.5),xlab="no. of heads",main="Tossing 500 coins 10K times")
data= rbinom(runif(10000),500,0.5)
transform_data=(data-mean(data))/sd(data)
mean(transform_data)
sd(transform_data)
transform_data.ordered=sort(transform_data)
cummulative_prob=(1:10000/(10000))
plot(transform_data.ordered,cummulative_prob,type="l",main="CDF of Random Variables in part b",col="red")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(4,4),
col=c("red","green"),
bg="grey96")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(10,10),
col=c("red","green"),
bg="grey96")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("topright",
inset=.1,
cex = 2,
title="Legend",
c("Binomial","Gaussian"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("bottomright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
data.observation<-f()
data.observation.order<-sort(data.observation)
data<-data.observation.order
prob<-pmf(data)
plot(1:max(data),prob,type="s",main="PMF of no. of events",xlab="count of events in [0,1]",ylab="frequency",col="green")
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data.pois)
lines(data.pois.ordered,dpois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
legend("bottomright",
inset=.1,
cex = 1,
title="Legend",
c("poisson","exponential"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data.pois)
lines(data.pois.ordered,dpois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("poisson","exponential"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
1-(4/7)^2-(3/7)^2
1-(2/5)^2-(3/5)^2
(7/12)*(0.489) + (5/12)*(0.48)
1/5
1-(1/5)^2-(4/5)^2
1-(5/7)^2-(2//7)^2
1-(5/7)^2-(2/7)^2
5*(0.32)+7*(0.4081)
(5*(0.32)+7*(0.4081))/12
1-(19/16)^2-(7/16)^2
1-(9/16)^2-(7/16)^2
1/3*(log(1/3))+2/3*(log(2/3))+(2/5)*log(2/5)+3/5*log(3/5)
1/3*(log(1/3))+2/3*(log(2/3))
(2/5)*log(2/5)+3/5*log(3/5)
(3/8)*(0.63)+(5/8)*(0.67)
(1/3)*(log(1/3))+(2/3)*(log(2/3))
log2
log(2)
log(4)
(1/3)*(log2(1/3))+(2/3)*(log2(2/3))
(2/5)*log2(2/5)+3/5*log2(3/5)
(3/8)*(0.91)+(5/8)*(0.97)
25/111
(25/111)*51
(25/111)*85
19.14-11.486
(25/111)*106
(25/111)*58
0.25+0.70+1.87+0.50+0.70+4.37+1.87
2.25+0.49+0.68+8.73+0.49+1+1.50+2+1.24+0.50+1+3+2+1.16+16+0.86+0.62+0.83+1.39+2.23+0.63+0.75+0.66
0.42+0.62+0.88+0.87+0.85+0.74+0.85+1+1.38+0.45+2.25+2.87+0.75+0.84+0.07+0.25-1.90+1.12+0.83+0.50+0.87+0.88
setwd("C:/Users/Krish/Desktop/DataIncubator")
data<-read.table(paste("./Data/Calls_for_Service_","2011",".csv",sep=""),header=TRUE,sep=",",colClasses=c("NULL",rep("factor",3),rep("NULL",2),rep("character",6),rep("NULL",2),"factor","character"))
data_s<-data[data$TimeDispatch != '' & data$TimeArrive != '',]
data_s$TimeDispatch<-strptime(data_s$TimeDispatch,format="%m/%d/%Y %I:%M:%S %p")
data_s$TimeArrive<-strptime(data_s$TimeArrive,format="%m/%d/%Y %I:%M:%S %p")
data_s$responseTime<-with(data_s,as.numeric(TimeArrive-TimeDispatch))
mean(data_s$responseTime)
View(head(data_s))
data_s_summary<-data_s %>% group_by(PoliceDistrict) %>% summarise(meanRT=mean(responseTime))
library(dpylr)
library(dplyr)
data_s_summary<-data_s %>% group_by(PoliceDistrict) %>% summarise(meanRT=mean(responseTime))
data_d<-data_s[,c(PoliceDistrict,responseTime)]
data_d<-data_s[,c("PoliceDistrict","responseTime")]
View(head(data_d))
data_d_summary<-data_d %>% group_by(PoliceDistrict) %>% summarise(meanRT=mean(responseTime))
View(head(data_d_summary))
data_d<-data_s[data_s$responseTime>0,c("PoliceDistrict","responseTime")]
data_d_summary<-data_d %>% group_by(PoliceDistrict) %>% summarise(meanRT=mean(responseTime))
View(head(data_d_summary))
head(data_d_summary)
cmp<-sort(data_d_summary$meanRT,decreasing=TRUE)
View(cmp)
653-444
444-360
View(data_d[,sort(data$data_d_summary)])
View(data_d_summary[,sort(data_d_summary$meanRT)])
View(data_d_summary)
653-209
653-84
444-84
setwd("C:/Users/Krish/Google Drive/Coursera/coursera/Projects/Recommendation System")
list.files("./images")
![](./images/ageplot.PNG)
6.75+4.5+6.22
50.45-17.47
0.62+0.44+0.77+0.75+1.35+0.45+0.82-0.73
209-84
getStream<-function(T,x){ return (sample(x,T,replace=TRUE))}
getML<-function(stream,N){
s<-sort(stream,decreasing=TRUE)
M<-prod(s[1:N]) #max register
L<-prod(stream[(length(stream)-(N-1)):length(stream)]) #Last register
return (M-L)
}
x<-1:10
mean_sd_ML<-function(times,T,N){
M_minus_L=c()
for (i in 1:times){
stream<-getStream(T,x)
M_minus_L=c(M_minus_L,getML(stream,N))
}
mean<-mean(M_minus_L)
s_d<-sd(M_minus_L)
return (cbind(mean,s_d))
}
mean_sd_ML(10000,8,2)
mean_sd_ML(10000,32,4)
mean_sd_ML(100000,32,4)
