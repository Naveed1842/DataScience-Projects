x<-x+prob[i]
cumm.prob<-c(cumm.prob,x)
}
return (cumm.prob)
}
ecdf<-function(prob){
cumm.prob<-c()
x<-0
for (i in 1:length(prob)){
x<-x+prob[i]
cumm.prob<-c(cumm.prob,x)
}
return (cumm.prob)
}
cumm.prob<-ecdf(prob)
plot(1:max(data),cumm.prob)
plot(1:max(data),cumm.prob,type="s")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability")
data<-rpois(10000,3)
data.ordered<-sort(data)
plot(data.ordered,ppois(data.ordered,3),type="l",main="poisson distribution with lambda=3")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
data.observation<-f()
data.observation.order<-sort(data.observation)
data<-data.observation.order
pmf<-function(data){
frequency<-c()
for (i in 1:max(data)){
n<-0
for (j in 1:10000){
if(data[j]==i){n<-n+1}
}
frequency<-c(frequency,n/10000)
}
return (frequency)
}
prob<-pmf(data)
plot(1:max(data),prob,type="s",main="PMF of no. of events",xlab="count of events in [0,1]",ylab="frequency")
ecdf<-function(prob){
cumm.prob<-c()
x<-0
for (i in 1:length(prob)){
x<-x+prob[i]
cumm.prob<-c(cumm.prob,x)
}
return (cumm.prob)
}
cumm.prob<-ecdf(prob)
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data)
lines(data.pois.ordered,ppois(data.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
lines(data.pois.ordered,ppois(data.ordered,3),type="s",main="poisson distribution with lambda=3",col="red")
lines(data.pois.ordered,ppois(data.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
lines(data.pois.ordered,ppois(data.ordered,3),main="poisson distribution with lambda=3",col="red")
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data)
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
lines(data.pois.ordered,ppois(data.ordered,3),main="poisson distribution with lambda=3",col="red")
plot(data.pois.ordered,ppois(data.ordered,3),main="poisson distribution with lambda=3",col="red")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
plot(data.pois.ordered,ppois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
plot(1:max(data),cumm.prob,type="s",xlab="count of events in [0,1] time",main="ecdf",ylab="probability",col="green")
lines(data.pois.ordered,ppois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
?ppois
plot(1:max(data),prob,type="s",main="PMF of no. of events",xlab="count of events in [0,1]",ylab="frequency")
lines(data.pois.ordered,dpois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
lines(data.pois.ordered,ppois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
data.pois<-rpois(10000,3)
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data.pois)
plot(data.pois.ordered,ppois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("topright",
inset=.05,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(2,2),
col=c("green","red"),
bg="grey96")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(2,2),
col=c("green","red"),
bg="grey96")
hist(rbinom(runif(10000),500,0.5),xlab="no. of heads",main="Tossing 500 coins 10K times")
data= rbinom(runif(10000),500,0.5)
transform_data=(data-mean(data))/sd(data)
mean(transform_data)
sd(transform_data)
transform_data.ordered=sort(transform_data)
cummulative_prob=(1:10000/(10000))
plot(transform_data.ordered,cummulative_prob,type="l",main="CDF of Random Variables in part b",col="red")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(4,4),
col=c("red","green"),
bg="grey96")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=TRUE,
lty=c(1,1),
lwd=c(10,10),
col=c("red","green"),
bg="grey96")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("topright",
inset=.1,
cex = 2,
title="Legend",
c("Binomial","Gaussian"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
plot(transform_data.ordered,cummulative_prob,type="l",main="Binomial Approxing Gaussian for large N",col="red")
lines(transform_data.ordered,pnorm(transform_data.ordered),col="green")
legend("bottomright",
inset=.1,
cex = 1,
title="Legend",
c("Binomial","Gaussian"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
data.observation<-f()
data.observation.order<-sort(data.observation)
data<-data.observation.order
prob<-pmf(data)
plot(1:max(data),prob,type="s",main="PMF of no. of events",xlab="count of events in [0,1]",ylab="frequency",col="green")
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data.pois)
lines(data.pois.ordered,dpois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
legend("bottomright",
inset=.1,
cex = 1,
title="Legend",
c("poisson","exponential"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
data.pois<-rpois(10000,3)
data.pois.ordered<-sort(data.pois)
lines(data.pois.ordered,dpois(data.pois.ordered,3),type="l",main="poisson distribution with lambda=3",col="red")
legend("topright",
inset=.1,
cex = 1,
title="Legend",
c("poisson","exponential"),
horiz=FALSE,
lty=c(1,1),
lwd=c(2,2),
col=c("red","green"),
bg="grey96")
1-(4/7)^2-(3/7)^2
1-(2/5)^2-(3/5)^2
(7/12)*(0.489) + (5/12)*(0.48)
1/5
1-(1/5)^2-(4/5)^2
1-(5/7)^2-(2//7)^2
1-(5/7)^2-(2/7)^2
5*(0.32)+7*(0.4081)
(5*(0.32)+7*(0.4081))/12
1-(19/16)^2-(7/16)^2
1-(9/16)^2-(7/16)^2
1/3*(log(1/3))+2/3*(log(2/3))+(2/5)*log(2/5)+3/5*log(3/5)
1/3*(log(1/3))+2/3*(log(2/3))
(2/5)*log(2/5)+3/5*log(3/5)
(3/8)*(0.63)+(5/8)*(0.67)
(1/3)*(log(1/3))+(2/3)*(log(2/3))
log2
log(2)
log(4)
(1/3)*(log2(1/3))+(2/3)*(log2(2/3))
(2/5)*log2(2/5)+3/5*log2(3/5)
(3/8)*(0.91)+(5/8)*(0.97)
25/111
(25/111)*51
(25/111)*85
19.14-11.486
(25/111)*106
(25/111)*58
0.25+0.70+1.87+0.50+0.70+4.37+1.87
2.25+0.49+0.68+8.73+0.49+1+1.50+2+1.24+0.50+1+3+2+1.16+16+0.86+0.62+0.83+1.39+2.23+0.63+0.75+0.66
0.42+0.62+0.88+0.87+0.85+0.74+0.85+1+1.38+0.45+2.25+2.87+0.75+0.84+0.07+0.25-1.90+1.12+0.83+0.50+0.87+0.88
getwd()
setwd("C:/Users/Krish/Google Drive/Coursera/coursera/Projects/Recommendation System/code ")
dataTbl <- read.table(file="./Data/ml-100k/u.data")
View(head(dataTbl))
colnames(dataTbl) <- c("user_id", "item_id", "rating", "timestamp")
dataTbl <- subset(dataTbl, select = -c(timestamp) )
View(head(dataTbl))
## preparing userTbl
userTbl <- read.table(file="ml-100k/u.user", sep ="|")
userTbl <- read.table(file="./Data/ml-100k/u.user", sep ="|")
#assign names to columns for ease of processing
colnames(userTbl) <- c("user_id", "age" , "gender","occupation", "zip_code")
#dropping zip code - decided not useful for me
userTbl <- subset(userTbl, select = -c(zip_code)
)
colnames(userTbl) <- c("user_id", "age" , "gender","occupation", "zip_code")
View(userTbl)
userTbl <- read.table(file="./Data/ml-100k/u.user", sep =",")
View(userTbl)
#assign names to columns for ease of processing
colnames(userTbl) <- c("user_id", "age" , "gender","occupation", "zip_code")
#dropping zip code - decided not useful for me
userTbl <- subset(userTbl, select = -c(zip_code)
)
genreTbl <- read.table(file="./Data/ml-100k/u.genre", sep = "|", quote = "" )
View(genreTbl)
itemTbl <- read.table(file="./Data/ml-100k/u.item", sep ="|", quote = "")
View(itemTbl)
genreVect <- as.vector(genreTbl[["V1"]])
genreVect
#change Childern's to childerns to prevent errors
genreVect[genreVect %in% "Children\'s"] <- "Childrens"
#assign names to columns for ease of processing
colnames(itemTbl) <- c(c("item_id", "movie_title", "release_date", "video_release_date",
"IMDb_URL"), genreVect)
View(itemTbl)
#drop video_release_date (seems to not be filled) and URL from table
itemTbl <- subset(itemTbl, select = -c(IMDb_URL, video_release_date)
)
#fix dates field
itemTbl$release_date <- as.Date(itemTbl$release_date, "%d-%b-%Y")
View(itemTbl)
View(dataTbl)
##create unified table
#merge itemTbl
unifiedTbl <- merge(dataTbl, itemTbl)
View(unifiedTbl)
unifiedTbl <- subset(unifiedTbl, select = -c(item_id) )
View(unifiedTbl)
View(unifiedTbl)
View(userTbl)
#merge userTbl and remove user_id
unifiedTbl <- merge(unifiedTbl, userTbl)
unifiedTbl <- unique(unifiedTbl)
View(unifiedTbl)
View(genreDat)
genreDat <- ddply(unifiedTbl, ~user_id + movie_title, createGenreFieldSingle)
library(plyr)
genreDat <- ddply(unifiedTbl, ~user_id + movie_title, createGenreFieldSingle)
createGenreFieldSingle <- function(x){
#temporarally remove variables to make looping easier,
tempDat <- subset(x, select = -c(user_id, rating, movie_title,
release_date, age, gender, occupation))
count <- 0
genre <- "unknown" #unknown genre is default
#some movies are have multiple rating from same user!
#check if there are muliple rows in x
if(nrow(x) > 1){
#set tempDat to only have one row
tempDat <- head(tempDat, n = 1)
}
for (i in names(tempDat)){
if(tempDat[i] == 1){
count <- count + 1
genre <- i
}
}
if(count > 1){
genre <- "multiple"
}
names(genre) <- "genre"
return(genre)
}
#will remove elements where user had voted twice for the same movie (THIS IS REALLY SLOW)
genreDat <- ddply(unifiedTbl, ~user_id + movie_title, createGenreFieldSingle)
View(genreDat)
unifiedTblSingle <- merge(genreDat, unifiedTbl)
View(unifiedTblSingle)
#keep only stuff I need
unifiedTblSingle <- subset(unifiedTblSingle, select =
c(user_id, movie_title, rating, genre,
release_date, age, gender, occupation) )
write.csv(unifiedTblSingle, "./Data/unifiedMLData.csv", row.names = FALSE)
##function to create potentially multiple values or rows
##intended use with ddply
createGenreFieldMultiple <- function(x){
#temporarally remove variables to make looping easier,
tempDat <- subset(x, select = -c(user_id, rating, movie_title,
release_date, age, gender, occupation))
genreItem <- data.frame()
#some movies are have multiple rating from same user!
#check if there are muliple rows in x
if(nrow(x) > 1){
#set tempDat to only have one row
tempDat <- head(tempDat, n = 1)
}
for (i in names(tempDat)){
if(tempDat[i] == 1){
genreItem<- rbind(genreItem,i)
}
genreItem<- rbind(genreItem, NA)
}
names(genreItem) <- "genre"
return(genreItem)
}
unifiedTblMulti <- ddply(unifiedTbl, ~movie_title , createGenreFieldMultiple)
View(unifiedTblMulti)
#remove all NA
unifiedTblMulti <- na.omit(unifiedTblMulti)
#clean and remerge
unifiedTblMulti <- merge(unifiedTblMulti, ddply(unifiedTbl, ~movie_title + user_id,
summarize, release_date))
unifiedTblMulti <- merge(unifiedTblMulti, unifiedTbl)
View(unifiedTblMulti)
#some element re-added have no genre at all - removing from data
unifiedTblMulti <- unifiedTblMulti[unifiedTblMulti$genre != "1",]
unifiedTblMulti <- subset(unifiedTblMulti,
select = c(user_id, movie_title, genre, rating,
release_date, age, gender, occupation) )
write.csv(unifiedTblMulti, "./Data/unifiedMLDataMulti.csv", row.names = FALSE)
library(ggplot2)
library(plyr)
library(RColorBrewer)
library(grid)
mlDat <- read.csv("./Data/unifiedMLData.csv")
mlDat$release_date <- as.Date(mlDat$release_date, "%Y-%m-%d")
# load multi genre file
mlDat_multi <- read.csv("Results/unifiedMLDataMulti.csv")
mlDat_multi <- read.csv("./Data/unifiedMLDataMulti.csv")
# prepare table for analysis of movies
mlDat_movie <- ddply(mlDat, ~movie_title + release_date + genre, summarize,
mean_rating = mean(rating))
datesPlot <- ggplot(mlDat_movie, aes(release_date)) + geom_histogram(aes(y = ..density..),
binwidth = 500, colour = "black", fill = "white")
# alter axis
datesPlot <- datesPlot + geom_density(alpha = 0.2, fill = "#FF6666")
print(datesPlot)
# sorts by number of users
userPlot <- ggplot(mlDat_user, aes(x = reorder(occupation, occupation, function(x) -length(x)),
fill = gender)) + geom_bar()
# fix axis
userPlot <- userPlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
userPlot <- userPlot + ylab("number of users") + xlab("occupation")
# flip axis to make professions easier to read
userPlot <- userPlot + coord_flip()
ggsave(filename = "userPlot.pdf")
gender_dat <- ddply(mlDat_user, ~occupation, summarize, perc_male = (length(gender[gender ==
"M"])/length(gender)), counts = -length(user_id))
# sorts by number of users
genderPlot <- ggplot(gender_dat, aes(x = reorder(occupation, counts), perc_male)) +
geom_bar(stat = "identity")
# fix axis
genderPlot <- genderPlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
genderPlot <- genderPlot + ylab("percent male") + xlab("occupation")
# flip axis to make professions easier to read
genderPlot <- genderPlot + coord_flip()
ggsave(filename = "genderPlot.pdf")
agePlot <- ggplot(mlDat_user, aes(x = reorder(occupation, occupation, function(x) -length(x)),
age)) + geom_violin()
# fix axis
agePlot <- agePlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
agePlot <- agePlot + ylab("age") + xlab("occupation")
# flip axis to make professions easier to read
agePlot <- agePlot + coord_flip()
# for plotting for age information
agePlot <- ggplot(mlDat_user, aes(x = reorder(occupation, occupation, function(x) -length(x)),
age)) + geom_violin()
# fix axis
agePlot <- agePlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
agePlot <- agePlot + ylab("age") + xlab("occupation")
# flip axis to make professions easier to read
agePlot <- agePlot + coord_flip()
ggsave(filename = "agePlot.pdf"
)
# sorts by number of users
userPlot <- ggplot(mlDat_user, aes(x = reorder(occupation, occupation, function(x) -length(x)),
fill = gender)) + geom_bar()
# fix axis
userPlot <- userPlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
userPlot <- userPlot + ylab("number of users") + xlab("occupation")
# flip axis to make professions easier to read
userPlot <- userPlot + coord_flip()
ggsave(filename = "userPlot.pdf")
mlDat <- read.csv("./Data/unifiedMLData.csv")
mlDat$release_date <- as.Date(mlDat$release_date, "%Y-%m-%d")
mlDat_multi <- read.csv("./Data/unifiedMLDataMulti.csv")
userPlot <- ggplot(mlDat_user, aes(x = reorder(occupation, occupation, function(x) -length(x)),
fill = gender)) + geom_bar()
# fix axis
userPlot <- userPlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
userPlot <- userPlot + ylab("number of users") + xlab("occupation")
# flip axis to make professions easier to read
userPlot <- userPlot + coord_flip()
ggsave(filename = "userPlot.pdf")
mlDat <- read.csv("./Data/unifiedMLData.csv")
mlDat$release_date <- as.Date(mlDat$release_date, "%Y-%m-%d")
# load multi genre file
mlDat_multi <- read.csv("./Data/unifiedMLDataMulti.csv")
userPlot <- ggplot(mlDat_user, aes(x = reorder(occupation, occupation, function(x) -length(x)),
fill = gender)) + geom_bar()
# fix axis
userPlot <- userPlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
userPlot <- userPlot + ylab("number of users") + xlab("occupation")
# flip axis to make professions easier to read
userPlot <- userPlot + coord_flip()
ggsave(filename = "userPlot.pdf")
userPlot <- ggplot(mlDat_user, aes(x = reorder(occupation, occupation, function(x) -length(x)),
fill = gender)) + geom_bar()
# prepare table for analysis of users
mlDat_user <- ddply(mlDat, ~user_id + age + gender + occupation, summarize,
mean_rating = mean(rating))
agePlot <- ggplot(mlDat_user, aes(age)) + geom_histogram(aes(y = ..density..),
binwidth = 1, colour = "black", fill = "white")
agePlot <- agePlot + geom_density(alpha = 0.2, fill = "#FF6666")
print(agePlot)
# sorts by number of users
userPlot <- ggplot(mlDat_user, aes(x = reorder(occupation, occupation, function(x) -length(x)),
fill = gender)) + geom_bar()
# fix axis
userPlot <- userPlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
userPlot <- userPlot + ylab("number of users") + xlab("occupation")
# flip axis to make professions easier to read
userPlot <- userPlot + coord_flip()
ggsave(filename = "userPlot.pdf")
gender_dat <- ddply(mlDat_user, ~occupation, summarize, perc_male = (length(gender[gender ==
"M"])/length(gender)), counts = -length(user_id))
# sorts by number of users
genderPlot <- ggplot(gender_dat, aes(x = reorder(occupation, counts), perc_male)) +
geom_bar(stat = "identity")
# fix axis
genderPlot <- genderPlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
genderPlot <- genderPlot + ylab("percent male") + xlab("occupation")
# flip axis to make professions easier to read
genderPlot <- genderPlot + coord_flip()
ggsave(filename = "genderPlot.pdf")
agePlot <- ggplot(mlDat_user, aes(x = reorder(occupation, occupation, function(x) -length(x)),
age)) + geom_violin()
# fix axis
agePlot <- agePlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
agePlot <- agePlot + ylab("age") + xlab("occupation")
# flip axis to make professions easier to read
agePlot <- agePlot + coord_flip()
# for plotting for age information
agePlot <- ggplot(mlDat_user, aes(x = reorder(occupation, occupation, function(x) -length(x)),
age)) + geom_violin()
# fix axis
agePlot <- agePlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
agePlot <- agePlot + ylab("age") + xlab("occupation")
# flip axis to make professions easier to read
agePlot <- agePlot + coord_flip()
ggsave(filename = "agePlot.pdf")
# for plotting rating trends
rankPlot <- ggplot(mlDat_user, aes(x = reorder(occupation, occupation, function(x) -length(x)),
mean_rating)) + geom_violin()
# fix axis
rankPlot <- rankPlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
rankPlot <- rankPlot + ylab("Average rating on Movies") + xlab("occupation")
# flip axis to make professions easier to read
rankPlot <- rankPlot + coord_flip()
ggsave(filename = "rankPlot.pdf")
# for printing figures adjacent to eachother
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 4)))
print(userPlot, vp = vplayout(1, 1))
print(genderPlot, vp = vplayout(1, 2))
print(agePlot, vp = vplayout(1, 3))
print(rankPlot, vp = vplayout(1, 4))
